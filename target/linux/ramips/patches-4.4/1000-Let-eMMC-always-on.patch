From 06e1d10ea101d53807979cde30afe577ac4b43de Mon Sep 17 00:00:00 2001
From: Henry Chang <jrhenry@flotechnologies.com>
Date: Wed, 5 Apr 2017 22:21:40 -0700
Subject: [PATCH 1/1] Let eMMC always on

---
 drivers/mmc/host/mtk-mmc/mt6575_sd.h |  6 +++
 drivers/mmc/host/mtk-mmc/sd.c        | 92 ++++++++----------------------------
 2 files changed, 26 insertions(+), 72 deletions(-)

diff --git a/drivers/mmc/host/mtk-mmc/mt6575_sd.h b/drivers/mmc/host/mtk-mmc/mt6575_sd.h
index e90c4f1..18ad7b7 100644
--- a/drivers/mmc/host/mtk-mmc/mt6575_sd.h
+++ b/drivers/mmc/host/mtk-mmc/mt6575_sd.h
@@ -146,6 +146,7 @@ enum {
 #define OFFSET_MSDC_HW_DBG      (0xf8)
 #define OFFSET_MSDC_VERSION     (0x100)
 #define OFFSET_MSDC_ECO_VER     (0x104)
+#define OFFSET_MSDC_EMMC50_CFG0 (0x208)
 
 /*--------------------------------------------------------------------------*/
 /* Register Address                                                         */
@@ -161,6 +162,7 @@ enum {
 #define MSDC_TXDATA             REG_ADDR(MSDC_TXDATA)
 #define MSDC_RXDATA             REG_ADDR(MSDC_RXDATA)
 #define MSDC_PATCH_BIT0         REG_ADDR(MSDC_PATCH_BIT)
+#define MSDC_EMMC50_CFG0        REG_ADDR(MSDC_EMMC50_CFG0)
 
 /* sdmmc register */
 #define SDC_CFG                 REG_ADDR(SDC_CFG)
@@ -444,6 +446,10 @@ enum {
 #define CARD_READY_FOR_DATA             (1<<8)
 #define CARD_CURRENT_STATE(x)           ((x&0x00001E00)>>9)
 
+#define EMMC50_CFG_PADCMD_LATCHCK (0x1 << 0)   /* RW */
+#define EMMC50_CFG_CRCSTS_EDGE    (0x1 << 3)   /* RW */
+#define EMMC50_CFG_CFCSTS_SEL     (0x1 << 4)   /* RW */
+
 /*--------------------------------------------------------------------------*/
 /* Descriptor Structure                                                     */
 /*--------------------------------------------------------------------------*/
diff --git a/drivers/mmc/host/mtk-mmc/sd.c b/drivers/mmc/host/mtk-mmc/sd.c
index 1d7e610..b6e7814 100644
--- a/drivers/mmc/host/mtk-mmc/sd.c
+++ b/drivers/mmc/host/mtk-mmc/sd.c
@@ -652,7 +652,7 @@ static void msdc_set_mclk(struct msdc_host *host, int ddr, unsigned int hz)
     }
 
     msdc_irq_save(flags);
-    
+
 #if defined (CONFIG_MT7621_FPGA) || defined (CONFIG_MT7628_FPGA)
     mode = 0x0; /* use divisor */
     if (hz >= (hclk >> 1)) {
@@ -687,22 +687,18 @@ static void msdc_set_mclk(struct msdc_host *host, int ddr, unsigned int hz)
         }
     }    
 #endif
-    /* set clock mode and divisor */
-    sdr_set_field(MSDC_CFG, MSDC_CFG_CKMOD, mode);
-    sdr_set_field(MSDC_CFG, MSDC_CFG_CKDIV, div);
-   
-    /* wait clock stable */
-    while (!(sdr_read32(MSDC_CFG) & MSDC_CFG_CKSTB));
 
-    host->sclk = sclk;
-    host->mclk = hz;
-    msdc_set_timeout(host, host->timeout_ns, host->timeout_clks); // need?
-     
-    INIT_MSG("================");  
-    INIT_MSG("!!! Set<%dKHz> Source<%dKHz> -> sclk<%dKHz>", hz/1000, hclk/1000, sclk/1000); 
-    INIT_MSG("================");
+	sdr_set_field(MSDC_CFG, MSDC_CFG_CKMOD | MSDC_CFG_CKDIV,
+			(mode << 8) | (div % 0xff));
+	sdr_set_bits(MSDC_CFG, MSDC_CFG_CKPDN);
+	while (!(sdr_read32(MSDC_CFG) & MSDC_CFG_CKSTB))
+		cpu_relax();
+	host->sclk = sclk;
+	host->mclk = hz;
+	/* need because clk changed. */
+	msdc_set_timeout(host, host->timeout_ns, host->timeout_clks);
+	msdc_irq_restore(flags);
 
-    msdc_irq_restore(flags);
 }
 
 /* Fix me. when need to abort */
@@ -2590,7 +2586,6 @@ static void msdc_enable_cd_irq(struct msdc_host *host, int enable)
 static void msdc_init_hw(struct msdc_host *host)
 {
     u32 base = host->base;
-    struct msdc_hw *hw = host->hw;
 
 #ifdef MT6575_SD_DEBUG	
     msdc_reg[host->id] = (struct msdc_regs *)host->base;
@@ -2605,8 +2600,8 @@ static void msdc_init_hw(struct msdc_host *host)
     msdc_vdd_on(host);
 #endif /* end of --- */
     /* Configure to MMC/SD mode */
-    sdr_set_field(MSDC_CFG, MSDC_CFG_MODE, MSDC_SDMMC); 
-       
+	sdr_set_bits(MSDC_CFG, MSDC_CFG_MODE | MSDC_CFG_CKPDN);
+ 
     /* Reset */
     msdc_reset();
     msdc_clr_fifo();
@@ -2617,32 +2612,14 @@ static void msdc_init_hw(struct msdc_host *host)
     /* Disable and clear all interrupts */
     sdr_clr_bits(MSDC_INTEN, sdr_read32(MSDC_INTEN));
     sdr_write32(MSDC_INT, sdr_read32(MSDC_INT));
-    
-#if 1
-	/* reset tuning parameter */
-    sdr_write32(MSDC_PAD_CTL0,   0x00090000);
-    sdr_write32(MSDC_PAD_CTL1,   0x000A0000);
-    sdr_write32(MSDC_PAD_CTL2,   0x000A0000);
-    // sdr_write32(MSDC_PAD_TUNE,   0x00000000);
-    sdr_write32(MSDC_PAD_TUNE,   0x84101010);		// for MT7620 E2 and afterward
-    // sdr_write32(MSDC_DAT_RDDLY0, 0x00000000);
-    sdr_write32(MSDC_DAT_RDDLY0, 0x10101010);		// for MT7620 E2 and afterward
-    sdr_write32(MSDC_DAT_RDDLY1, 0x00000000);
-    sdr_write32(MSDC_IOCON,      0x00000000);
-#if 0 // use MT7620 default value: 0x403c004f
-    sdr_write32(MSDC_PATCH_BIT0, 0x003C000F); /* bit0 modified: Rx Data Clock Source: 1 -> 2.0*/
-#endif
 
-    if (sdr_read32(MSDC_ECO_VER) >= 4) { 
-        if (host->id == 1) {	
-            sdr_set_field(MSDC_PATCH_BIT1, MSDC_PATCH_BIT1_WRDAT_CRCS, 1); 
-            sdr_set_field(MSDC_PATCH_BIT1, MSDC_PATCH_BIT1_CMD_RSP,    1);
-            
-            /* internal clock: latch read data */  
-            sdr_set_bits(MSDC_PATCH_BIT0, MSDC_PATCH_BIT_CKGEN_CK);  
-        }       	
-    }   
-#endif    
+	sdr_write32(MSDC_PAD_TUNE, 0);
+	sdr_write32(MSDC_IOCON, 0);
+	sdr_set_field(MSDC_IOCON, MSDC_IOCON_DDLSEL, 0);
+	sdr_write32(MSDC_PATCH_BIT, 0x403c004f);
+	sdr_set_field(MSDC_PATCH_BIT, MSDC_CKGEN_MSDC_DLY_SEL, 1);
+	sdr_write32(MSDC_PATCH_BIT1, 0xffff0089);
+	sdr_set_bits(MSDC_EMMC50_CFG0, EMMC50_CFG_CFCSTS_SEL);
 
     /* for safety, should clear SDC_CFG.SDIO_INT_DET_EN & set SDC_CFG.SDIO in 
        pre-loader,uboot,kernel drivers. and SDC_CFG.SDIO_INT_DET_EN will be only
@@ -2653,38 +2630,9 @@ static void msdc_init_hw(struct msdc_host *host)
     /* disable detect SDIO device interupt function */
     sdr_clr_bits(SDC_CFG, SDC_CFG_SDIOIDE);
 
-    /* eneable SMT for glitch filter */
-    sdr_set_bits(MSDC_PAD_CTL0, MSDC_PAD_CTL0_CLKSMT);
-    sdr_set_bits(MSDC_PAD_CTL1, MSDC_PAD_CTL1_CMDSMT);
-    sdr_set_bits(MSDC_PAD_CTL2, MSDC_PAD_CTL2_DATSMT);
-
-#if 1
-    /* set clk, cmd, dat pad driving */
-    sdr_set_field(MSDC_PAD_CTL0, MSDC_PAD_CTL0_CLKDRVN, hw->clk_drv);
-    sdr_set_field(MSDC_PAD_CTL0, MSDC_PAD_CTL0_CLKDRVP, hw->clk_drv);
-    sdr_set_field(MSDC_PAD_CTL1, MSDC_PAD_CTL1_CMDDRVN, hw->cmd_drv);
-    sdr_set_field(MSDC_PAD_CTL1, MSDC_PAD_CTL1_CMDDRVP, hw->cmd_drv);
-    sdr_set_field(MSDC_PAD_CTL2, MSDC_PAD_CTL2_DATDRVN, hw->dat_drv);
-    sdr_set_field(MSDC_PAD_CTL2, MSDC_PAD_CTL2_DATDRVP, hw->dat_drv);
-#else 
-    sdr_set_field(MSDC_PAD_CTL0, MSDC_PAD_CTL0_CLKDRVN, 0);
-    sdr_set_field(MSDC_PAD_CTL0, MSDC_PAD_CTL0_CLKDRVP, 0);
-    sdr_set_field(MSDC_PAD_CTL1, MSDC_PAD_CTL1_CMDDRVN, 0);
-    sdr_set_field(MSDC_PAD_CTL1, MSDC_PAD_CTL1_CMDDRVP, 0);
-    sdr_set_field(MSDC_PAD_CTL2, MSDC_PAD_CTL2_DATDRVN, 0);
-    sdr_set_field(MSDC_PAD_CTL2, MSDC_PAD_CTL2_DATDRVP, 0);
-#endif
-
-    /* set sampling edge */
-
-    /* write crc timeout detection */
-    sdr_set_field(MSDC_PATCH_BIT0, 1 << 30, 1);
-
     /* Configure to default data timeout */
     sdr_set_field(SDC_CFG, SDC_CFG_DTOC, DEFAULT_DTOC);
 
-    msdc_set_buswidth(host, MMC_BUS_WIDTH_1);
-
     N_MSG(FUC, "init hardware done!");
 }
 
-- 
2.7.4

